# Playbook to clone vm from template. In this example template is configured with cloud-init.
# If you dont have cloud init configured, you can't use options ciuser, cipassword and sshkeys
- hosts: all
  gather_facts: false
  vars:
    vm: #Name of folder in vm_parameters. Name of folder will be used as name of VM and hostname. Set this variable using option --extra-vars={{yourvmname}} from cli
  vars_files:
    - '{{ host_parameters }}'
    - '../misc/vm_parameters/{{ vm }}/net.yml' # Interfaces info
    - '../misc/vm_parameters/{{ vm }}/params.yml' # Other parameters

  tasks:
  
    - name: Clone VM from template
      ansible.builtin.proxmox_kvm:
        # API info
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}'
        api_token_id: '{{ api_token_id }}'
        api_token_secret: '{{ api_token_secret }}'
        # Template vm parameters
        clone: 'example' #Name of template
        vmid: 999 #For templates I set descending IDs starting from 999
        ########################
        full: yes
        format: qcow2
        node: '{{ params.node }}'
        newid: '{{ params.vmid }}'
        name: '{{ vm }}'
        timeout: 600
      register: result

    # Fail when VM with given vmid exists to avoid altering existong vm
    - name: "Prevent VM collisions. state SKIPPING means OK"
      fail:
        msg: "VM with given ID exists"
      when: result is not changed

    - name: Resize disk
      community.general.proxmox_disk:
        # API info
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}'
        api_token_id: '{{ api_token_id }}'
        api_token_secret: '{{ api_token_secret }}'
        # VM params
        vmid: '{{ params.vmid }}'
        disk: scsi0
        size: '{{ params.disk_size }}G'
        state: resized

    - name: Add interfaces
      community.general.proxmox_nic:
        # API info
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}'
        api_token_id: '{{ api_token_id }}'
        api_token_secret: '{{ api_token_secret }}'
        #Params
        vmid: '{{ params.vmid }}'
        interface: '{{interface.name}}'
        bridge: '{{interface.bridge}}'
      loop: "{{interfaces}}"
      loop_control:
        loop_var: interface

    - name: Update new vm config
      ansible.builtin.proxmox_kvm:
        # API info
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}'
        api_token_id: '{{ api_token_id }}'
        api_token_secret: '{{ api_token_secret }}'
        # VM params
        node: '{{ params.node }}'
        vmid: '{{ params.vmid }}'
        memory: 4096
        cores: 8
        ciuser: '{{ params.user }}'
        cipassword: '{{ params.password }}'
        sshkeys: "{{ssh_key}}"
        update: true

    - name: Set tags
      ansible.builtin.proxmox_kvm:
        # API info
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}'
        api_token_id: '{{ api_token_id }}'
        api_token_secret: '{{ api_token_secret }}'
        # VM params
        node: '{{ params.node }}'
        vmid: '{{ params.vmid }}'
        tags:
          - '{{tag}}'
      loop: "{{params.tags}}"
      loop_control:
        loop_var: tag

    - name: Setup network
      ansible.builtin.proxmox_kvm:
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}'
        api_token_id: '{{ api_token_id }}'
        api_token_secret: '{{ api_token_secret }}'
        node: '{{ params.node }}'
        vmid: '{{ params.vmid }}'
        name: '{{ vm }}'
        ipconfig:
          '{"{{ interface.ipconfig }}": "{{ interface.address }}"}'
        update: true
      loop: "{{interfaces}}"
      loop_control:
        loop_var: interface

    - name: Start VM
      ansible.builtin.proxmox_kvm:
        vmid: '{{ params.vmid }}'
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}'
        api_token_id: '{{ api_token_id }}'
        api_token_secret: '{{ api_token_secret }}'
        state: started
        timeout: 120
